"""
This module represents a command to interact with an AI based on OpenAI's. 
"""

from webex_bot.models.command import Command
from webex_bot.formatting import quote_info
from webex_bot.models.response import response_from_adaptive_card
from webexteamssdk.models.cards.actions import OpenUrl
from webexteamssdk.models.cards import (
    Colors,
    TextBlock,
    FontWeight,
    FontSize,
    Column,
    AdaptiveCard,
    ColumnSet,
    Image,
    ImageSize,
    Fact,
    FactSet,
)

from llm_agent.logging_config.logging_setup import logger
from llm_agent.webex_chat.chat_api_client import send_message_to_chat_api


OPENAI_ICON = "https://github.com/fbradyirl/fbradyirl.github.io/raw/master/static/img/OpenAI_logo-100x70-rounded.png"
CARD_CALLBACK_MORE_INFO = "help"


class AiCommand(Command):
    """
    Represents a command to interact with an AI based on OpenAI's.

    This command allows users to interact with an AI by sending a message prompt.
    The AI will generate a response using OpenAI's models, and the response
    will be sent back to the user.

    Attributes:
      command_keyword (str): The keyword used to trigger this command.
      help_message (str): A brief description of the command.
      chained_commands (list): A list of additional commands to be executed after this command.

    Methods:
      execute(message, attachment_actions, activity):
        Executes the command by sending the message prompt to the AI and returning the response.
    """

    def __init__(self):
        super().__init__(
            command_keyword="my-buddy",
            help_message="Interact with an AI based on OpenAI's",
            chained_commands=[AiMoreInfoCallback()],
        )

    def execute(self, message, attachment_actions, activity):
        """
        Executes the command by sending the message prompt to the AI and returning the response.

        Args:
          message (str): The message prompt to be sent to the AI.
          attachment_actions: Actions related to attachments (not specified in the code).
          activity: The activity related to the command execution (not specified in the code).

        Returns:
          list: A list containing the response generated by the AI.
        """
        logger.debug("Message recevied from user: %s", message)
        response = send_message_to_chat_api(message=message)
        logger.debug("LLM response: %s", response)
        return [quote_info(response)]


class AiMoreInfoCallback(Command):
    """
    Represents a command for providing more information about the AI bot.

    This command displays an adaptive card with information about the bot,
    including its version, purpose, and a link to the OpenAI website.

    Args:
      Command (class): The base class for all commands.

    Attributes:
      card_callback_keyword (str): The keyword for identifying this command.
      delete_previous_message (bool): Whether to delete the previous message before executing the command.
    """

    def __init__(self):
        super().__init__(
            card_callback_keyword=CARD_CALLBACK_MORE_INFO,
            delete_previous_message=False,
        )

    def execute(self, message, attachment_actions, activity):
        bot_version_info = "Ask me something ðŸ¤™"

        bot_facts = []

        heading = TextBlock(
            "LLM my-buddy",
            weight=FontWeight.BOLDER,
            wrap=True,
            size=FontSize.LARGE,
        )
        subtitle = TextBlock(
            bot_version_info,
            wrap=True,
            size=FontSize.SMALL,
            color=Colors.LIGHT,
        )

        image = Image(url=OPENAI_ICON, size=ImageSize.AUTO)

        header_column = Column(items=[heading, subtitle], width=2)
        header_image_column = Column(
            items=[image],
            width=1,
        )

        max_tokens_info_textblock = TextBlock(
            "I'm an AI that can connect to network devices and run commands.",
            wrap=True,
            size=FontSize.SMALL,
            color=Colors.LIGHT,
        )

        temp_info_textblock = TextBlock(
            "**I'm here to help**",
            wrap=True,
            size=FontSize.SMALL,
            color=Colors.LIGHT,
        )

        card = AdaptiveCard(
            body=[
                ColumnSet(columns=[header_column, header_image_column]),
                FactSet(facts=bot_facts),
                ColumnSet(
                    columns=[
                        Column(
                            items=[
                                temp_info_textblock,
                                max_tokens_info_textblock,
                            ],
                            width=2,
                        )
                    ]
                ),
            ],
            actions=[
                OpenUrl(url="https://platform.openai.com", title="openai.com")
            ],
        )

        return response_from_adaptive_card(card)
